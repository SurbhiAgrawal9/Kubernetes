
suggestive site:-https://phoenixnap.com/kb/install-kubernetes-on-ubuntu
How to Install Kubernetes on Ubuntu 20.04

Prerequisites:-
•	Hardware Requirement:    
               For Master: 
               RAM: 2 GB 
               CPU: 2 Cores  
               For Slave: 
               RAM: 1 GB 
               CPU: 1 Core 
•	Software Requirement:   
               2 or more Ubuntu 18.04 servers 
              Access to a sudo or root privileged user account on each device 
              The apt package manager. 
•	 Machine Id should be different on each machine
 
Set up Docker  on  Master Node

   Installation Procedure: -
•	Sudo su
•	apt-get update
•	apt-get upgrade
•	sudo apt install docker.io -y
•	sudo systemctl enable docker
•	sudo systemctl status docker
 Note:- Start Docker if it is not running:-    sudo systemctl start docker

                          Install Kubernetes on Master Node
      https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/ (this curl and echo command has  prefer to this site)

•	curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg

•	echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

•	sudo apt install kubeadm kubelet kubectl

•	sudo systemctl status kubeadm kubelet kubectl

•	sudo apt-mark hold kubeadm kubelet kubectl

•	kubeadm version

      Deploy Kubernetes

•	sudo swapoff -a

•	sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

•	sudo nano /etc/modules-load.d/containerd.conf

Add the following two lines:
overlay
br_netfilter

•	sudo modprobe overlay 
•	sudo modprobe br_netfilter

•	sudo nano /etc/sysctl.d/kubernetes.conf

    Add the following lines:
     net.bridge.bridge-nf-call-ip6tables = 1
     net.bridge.bridge-nf-call-iptables = 1
     net.ipv4.ip_forward = 1
         sudo sysctl --system
         
Assign Unique Hostname for Each Server Node

•	sudo hostnamectl set-hostname master-node
ex:-   sudo hostnamectl set-hostname Master-Ubuntu
•	nano /etc/hosts  
Add the following lines:   
 1.1.1.104       Master-Ubuntu (server node Ip address & name)
 1.1.1.107        worker01(worker node Ip address & name)
       
                 Initialize Kubernetes on Master Node

•	sudo nano /etc/default/kubelet
Add the following line to the file
KUBELET_EXTRA_ARGS="--cgroup-driver=cgroupfs"
•	systemctl daemon-reload
•	systemctl restart kubelet
•	sudo nano /etc/docker/daemon.json
Append the following configuration block:
{
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
      "max-size": "100m"
   },
       "storage-driver": "overlay2"
       }

•	systemctl daemon-reload
•	systemctl restart docker
•	sudo nano /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
Add the line below to the file:
Environment="KUBELET_EXTRA_ARGS=--fail-swap-on=false"
•	systemctl daemon-reload
•	systemctl restart kubelet
•	kubeadm init --apiserver-advertise-address=1.1.1.104 --pod-network-cidr=10.244.0.0/16
(1.1.1.104  - this is a master node ip address)
prefer from github Link https://github.com/viveksinghggits/cluster-setup
                Youtube Link   https://youtu.be/shGDqYenoos
•	mkdir -p $HOME/.kube
•	sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
•	sudo chown $(id -u):$(id -g) $HOME/.kube/config
•	export KUBECONFIG=/etc/kubernetes/admin.conf

                  Deploy Pod Network to Cluster

•	kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
•	kubectl taint nodes --all node-role.kubernetes.io/control-plane-
Open Worker Node And Set up Docker on Worker Node

                Installation Procedure: -
•	Sudo su
•	apt-get update
•	apt-get upgrade
•	sudo apt install docker.io -y
•	sudo systemctl enable docker
•	sudo systemctl status docker
 Note:- Start Docker if it is not running:      sudo systemctl start docker

                      
                  
                               Install Kubernetes on Worker  Node

•	curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg

•	echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

•	sudo apt install kubeadm kubelet kubectl

•	sudo systemctl status kubeadm kubelet kubectl

•	sudo apt-mark hold kubeadm kubelet kubectl

•	kubeadm version

Note :-  Make sure you install the same version of each package on each machine.

Deploy Kubernetes
•	 sudo swapoff -a
•	 sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
•	 sudo nano /etc/modules-load.d/containerd.conf
•	 Add the following two lines:
           overlay
           br_netfilter
•	 sudo modprobe overlay
•	 sudo modprobe br_netfilter
•	 sudo nano /etc/sysctl.d/kubernetes.conf
•	 Add the following lines:
           net.bridge.bridge-nf-call-ip6tables = 1
           net.bridge.bridge-nf-call-iptables = 1
           net.ipv4.ip_forward = 1
•	 sudo sysctl --system
•	 sudo hostnamectl set-hostname worker01
note:-  If you have additional worker nodes, use this process to set a unique hostname on each.
Edit the hosts file on each node by adding the IP address and hostname of the servers you want to add to the cluster.
•	     sudo nano /etc/hosts
1.1.1.104      Master-Ubuntu (server node Ip address & name)
1.1.1.107      worker01(worker node Ip address & name)

Join Worker Node to Cluster
•	systemctl stop apparmor
•	sudo systemctl disable apparmor
•	systemctl restart containerd.service

•	kubeadm join command
      kubeadm join [master-node-ip]:6443 --token abcdef.1234567890abcdef --discovery-token-ca-cert-hash sha256:1234..cdef

Switch to the master server, and enter:
•	 kubectl get nodes
