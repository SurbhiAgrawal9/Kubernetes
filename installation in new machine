## Installation in new machine of ubuntu 20.04(virtual machine) 

suggestive site:-https://phoenixnap.com/kb/install-kubernetes-on-ubuntu
## How to Install Kubernetes on Ubuntu 20.04

Prerequisites:-
Hardware Requirement:    
               For Master: 
               RAM: 2 GB 
               CPU: 2 Cores  
               For Slave: 
               RAM: 1 GB 
               CPU: 1 Core 
Software Requirement:   
               2 or more Ubuntu 18.04 servers 
              Access to a sudo or root privileged user account on each device 
              The apt package manager. 
 Machine Id should be different on each machine
 _________________________________________________________


Set up Docker  on  Master Node

   Installation Procedure: -

#    switch from ubuntu user to root user:
            1)     sudo su
#   This command compeletly uninstall Kubernetes and Docker package
       2)     sudo bash ./uninstall
#   Update the package list:
 3)      apt-get update
#   Upgrade the package list:
 4)      apt-get upgrade
#   install Docker with the command:
5)      sudo apt install docker.io -y
#   Set Docker to launch on boot by entering the following:
6)      sudo systemctl enable docker
#   Verify Docker is running:
7)      sudo systemctl status docker
Note:- Start Docker if it is not running:-    sudo systemctl start docker

Install Kubernetes on Master Node

https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/ (this curl and         echo command has  prefer to this site)

#   install the ca-certificates curl package:

                    8)      sudo apt-get install -y ca-certificates curl

#   install apt-transport-https:

     9)       sudo apt-get install -y apt-transport-https

    #    create a keyrings directory

                   10) mkdir /etc/apt/keyrings       
    #   use the curl command to download the Google Cloud public signing key:

     11)     curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg


#   Add the Kubernetes apt repository:

         12)  echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list 

#   Update apt package index with the new repository:

13)  apt-get update
 
#   Install Kubernetes tools:

     14)  sudo apt-get install kubeadm kubelet kubectl

Note:- this is comparsary command
           
apt-get update

#   Check the Status and verify Kubernetes is running:

     15)   sudo systemctl status kubeadm kubelet kubectl

#   Allow the process to complete:

     16)   sudo apt-mark hold kubeadm kubelet kubectl
        
#   check Kubeadm's version number and verify the installation:

          17)   kubeadm version

      Deploy Kubernetes

#   Disable the swap memory:
          18)    sudo swapoff -a

#   Then type the sed command below:

          19)   sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

#   Start by opening the configuration file for containerd in a text editor:

          20)   sudo nano /etc/modules-load.d/containerd.conf

    Add the following two lines:

overlay
br_netfilter

#   use the modprobe command to add the modules:
21)   sudo modprobe overlay
22)   sudo modprobe br_netfilter
#   Configure Kubernetes networking. Open the kubernetes.conf file: 

    23)   sudo nano /etc/sysctl.d/kubernetes.conf

    Add the following lines:

     net.bridge.bridge-nf-call-ip6tables = 1
     net.bridge.bridge-nf-call-iptables = 1
     net.ipv4.ip_forward = 1

#     reload the configuration by typing:
    24)   sudo sysctl --system
         
Assign Unique Hostname for Each Server Node
#   To assign it a unique hostname, run the following command in the master node:
                  25)   sudo hostnamectl set-hostname master-node106 
                                             Type here last digit of IP address on master node
 Edit the hosts file on each node by adding the IP address and hostname of the servers you want to add to the cluster:

    26)    nano /etc/hosts   
Add the following lines:   

 1.1.1.106      master-node106   (server node Ip address & name)
 1.1.1.107      worker-node107  (worker node Ip address & name)
       
Initialize Kubernetes on Master Node
.
#   Open the kubelet file in a text editor:
    
    27)   sudo nano /etc/default/kubelet

Add the following line to the file

KUBELET_EXTRA_ARGS="--cgroup-driver=cgroupfs"

#   Execute the following commands to reload the configuration:
         28)   systemctl daemon-reload
#   Restart the kubelet
         29)   systemctl restart kubelet
#   Open the Docker daemon configuration file:
              30)   sudo nano /etc/docker/daemon.json

Append the following configuration block:

{
      "exec-opts": ["native.cgroupdriver=systemd"],
      "log-driver": "json-file",
      "log-opts": {
      "max-size": "100m"
   },
       "storage-driver": "overlay2"
       }

#   Reload the configuration:
              31)   systemctl daemon-reload

#   Restart the Docker
              32)   systemctl restart docker

#   Open the kubeadm configuration file:

                   33)   sudo nano /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

Add the line below to the file:

Environment="KUBELET_EXTRA_ARGS=--fail-swap-on=false"

#   Reload the kubelet:

              34)   systemctl daemon-reload

#   Restart the kubelet
             35)    systemctl restart kubelet
#   Initialize the cluster by typing:
             36)   kubeadm init --apiserver-advertise-address=1.1.1.106 --pod-network-cidr=10.244.0.0/16

Note:- (1.1.1.106 - this is a master node ip address)
Note:- After running this join command, save the entire output in a text file.

prefer from github Link https://github.com/viveksinghggits/cluster-setup
     Youtube Link   https://youtu.be/shGDqYenoos

Note:- These four commands have to be written after looking at the output given in kubeadm init command.  
#    Enter the following to create a directory for the Kubernetes cluster:
       37)   mkdir -p $HOME/.kube
#    Copy admin.conf file from Kubernetes directory to  config file of .kube directory  
  38)   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#    Change the owner 
  39)   sudo chown $(id -u):$(id -g) $HOME/.kube/config
#    Export the path of KUBECONFIG variable
  40)   export KUBECONFIG=/etc/kubernetes/admin.conf
#   Copy admin.conf from master  to worker 
                 41)  sudo scp /etc/kubernetes/admin.conf ubuntu@1.1.1.107:/home/ubuntu
(1.1.1.107 :- this is a worker  node IP address)
Note:- If there are 2 worker nodes then this scp command will have to be run 2 times.

Deploy Pod Network to Cluster
       

#    Use kubectl to install Flannel:

            42)   kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

#    Untaint the node:
            43)   kubectl taint nodes --all node-role.kubernetes.io/control-plane-

Open Worker Node And Set up Docker on Worker Node

     Installation Procedure: -
#    switch from ubuntu user to root user:
            1)      sudo su
#   This command compeletly uninstall Kubernetes and Docker package
       2)      sudo bash ./uninstall
#    Update the package list:
  3)      apt-get update
#    Upgrade the package list:
  4)      apt-get upgrade
#    install Docker with the command:
  5)      sudo apt install docker.io -y
#    Set Docker to launch on boot by entering the following:
  6)      sudo systemctl enable docker
#    Verify Docker is running:
  7)      sudo systemctl status docker
Note:- Start Docker if it is not running:-    sudo systemctl start docker

Install Kubernetes on Worker  Node

#     install the ca-certificates curl package:

                    8)     sudo apt-get install -y ca-certificates curl

#     install apt-transport-https:

     9)      sudo apt-get install -y apt-transport-https
                  
   #      create a keyrings directory

                   10)     mkdir /etc/apt/keyrings 

#     use the curl command to download the Google Cloud public signing key:

     11)     curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg


#     Add the Kubernetes apt repository:

        12)    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list 

#     Update apt package index with the new repository:

        13)    apt-get update
 
#     Install Kubernetes tools:

   14)    sudo apt-get install kubeadm kubelet kubectl
    
   Note:- this is comparsary command
           
apt-get update


#     Check the Status and verify Kubernetes is running:

   15)    sudo systemctl status kubeadm kubelet kubectl

#     Allow the process to complete:

   16)    sudo apt-mark hold kubeadm kubelet kubectl
        
#     check Kubeadm's version number and verify the installation:

        17)    kubeadm version

Note :-  Make sure you install the same version of each package on each machine.

Deploy Kubernetes

#      Disable the swap memory:
          18)    sudo swapoff -a

#      Then type the sed command below:

           19)   sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

#      Start by opening the configuration file for containerd in a text editor:

           20)   sudo nano /etc/modules-load.d/containerd.conf


â€¢	Add the following two lines:

overlay
br_netfilter

 #      use the modprobe command to add the modules:
21)   sudo modprobe overlay
22)   sudo modprobe br_netfilter
#      Configure Kubernetes networking. Open the kubernetes.conf file: 
                    23)   sudo nano /etc/sysctl.d/kubernetes.conf

    Add the following lines:
        
          net.bridge.bridge-nf-call-ip6tables = 1
     net.bridge.bridge-nf-call-iptables = 1
     net.ipv4.ip_forward = 1

#    reload the configuration by typing:
     24)  sudo sysctl --system
#    To assign it a unique hostname, run the following command in the master node:
25) sudo hostnamectl set-hostname worker-node106

                         Type here last digit of IP address on worker node
 
Edit the hosts file on each node by adding the IP address and hostname of the servers you want to add to the cluster:

    26)    nano /etc/hosts   
Add the following lines:   

 1.1.1.106      master-node106   (server node Ip address & name)
 1.1.1.107      worker-node107  (worker node Ip address & name)
       
note:-  If you have additional worker nodes, use this process to set a               unique hostname on each.
Edit the hosts file on each node by adding the IP address and hostname of the servers you want to add to the cluster.

Join Worker Node to Cluster
#   Execute the following commands to stop apparmor:
      27)   systemctl stop apparmor
#   Execute the following commands to disable apparmor:
                28)   sudo systemctl disable apparmor
#   Execute the following commands to restart containerd.service:
      29)    systemctl restart containerd.service

kubeadm join command

      kubeadm join [master-node-ip]:6443 --token abcdef.1234567890abcdef --    discovery-token-ca-cert-hash sha256:1234..cdef

Note:- This join command is shown in master node when we run kubadam init command. The join command output changes every time.

#     copy  admin.conf  file in Kubernetes directory
                      30)   cp /home/ubuntu/admin.conf  /etc/kubernetes/
#     Enter the following to create a directory for the Kubernetes cluster:
  31)    mkdir -p $HOME/.kube
#     Copy admin.conf file from Kubernetes directory to  config file of .kube directory  
           32)    sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#     it confirms that your device has nodes, the Master node and Worker nodes.  
            33)   kubectl get node

Switch to the master server and enter :
    #    it confirms that your device has nodes, the Master node and Worker nodes. 
  34)   kubectl get nodes

Deploy a MySQL database server in Kubernetes - Static

https://dev.to/musolemasu/deploy-a-mysql-database-server-in-kubernetes-static-dpc

